
Robot arm atmega 2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000246  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002cb  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016f  00000000  00000000  0000063d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000257  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000241  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00000e4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__vector_1>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	a3 c0       	rjmp	.+326    	; 0x16c <__vector_9>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	94 d0       	rcall	.+296    	; 0x22e <main>
 106:	9d c0       	rjmp	.+314    	; 0x242 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_1>:

void checkHomeSwiches(struct Motor *motor){
	//set the switch state before begin
	//have to write following code for each motor
	if(SWM0 == SWITCHE_PRESSED){
		motor->HomeSwitchState = SWITCHE_PRESSED;
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
 120:	e0 91 00 02 	lds	r30, 0x0200
 124:	f0 91 01 02 	lds	r31, 0x0201
 128:	84 85       	ldd	r24, Z+12	; 0x0c
 12a:	95 85       	ldd	r25, Z+13	; 0x0d
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	51 f4       	brne	.+20     	; 0x144 <__vector_1+0x3a>
 130:	84 81       	ldd	r24, Z+4	; 0x04
 132:	95 81       	ldd	r25, Z+5	; 0x05
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	95 83       	std	Z+5, r25	; 0x05
 138:	84 83       	std	Z+4, r24	; 0x04
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	93 83       	std	Z+3, r25	; 0x03
 140:	82 83       	std	Z+2, r24	; 0x02
 142:	09 c0       	rjmp	.+18     	; 0x156 <__vector_1+0x4c>
 144:	84 81       	ldd	r24, Z+4	; 0x04
 146:	95 81       	ldd	r25, Z+5	; 0x05
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	95 83       	std	Z+5, r25	; 0x05
 14c:	84 83       	std	Z+4, r24	; 0x04
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	9f ef       	ldi	r25, 0xFF	; 255
 152:	93 83       	std	Z+3, r25	; 0x03
 154:	82 83       	std	Z+2, r24	; 0x02
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0b be       	out	0x3b, r0	; 59
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__vector_9>:
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	0b b6       	in	r0, 0x3b	; 59
 178:	0f 92       	push	r0
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
 182:	e0 91 00 02 	lds	r30, 0x0200
 186:	f0 91 01 02 	lds	r31, 0x0201
 18a:	86 81       	ldd	r24, Z+6	; 0x06
 18c:	97 81       	ldd	r25, Z+7	; 0x07
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	19 f4       	brne	.+6      	; 0x198 <__vector_9+0x2c>
 192:	17 82       	std	Z+7, r1	; 0x07
 194:	16 82       	std	Z+6, r1	; 0x06
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <__vector_9+0x34>
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	97 83       	std	Z+7, r25	; 0x07
 19e:	86 83       	std	Z+6, r24	; 0x06
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <pinSetup>:
 1b6:	10 92 04 01 	sts	0x0104, r1
 1ba:	8e e1       	ldi	r24, 0x1E	; 30
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	80 ef       	ldi	r24, 0xF0	; 240
 1c0:	8d b9       	out	0x0d, r24	; 13
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	84 b9       	out	0x04, r24	; 4
 1c6:	8d bb       	out	0x1d, r24	; 29
 1c8:	80 93 69 00 	sts	0x0069, r24
 1cc:	80 93 6a 00 	sts	0x006A, r24
 1d0:	80 93 6c 00 	sts	0x006C, r24
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 68 00 	sts	0x0068, r24
 1da:	08 95       	ret

000001dc <initialize>:
 1dc:	e0 91 00 02 	lds	r30, 0x0200
 1e0:	f0 91 01 02 	lds	r31, 0x0201
 1e4:	17 82       	std	Z+7, r1	; 0x07
 1e6:	16 82       	std	Z+6, r1	; 0x06
 1e8:	08 95       	ret

000001ea <pollMotor>:
	}
}

//main poll function
//only for testing M0
void pollMotor(struct Motor *motor){
 1ea:	fc 01       	movw	r30, r24
	PORTB = (1<<PB7);//test led
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	85 b9       	out	0x05, r24	; 5
	//run stop motor
	if(motor->running == TRUE){
 1f0:	80 81       	ld	r24, Z
 1f2:	91 81       	ldd	r25, Z+1	; 0x01
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	19 f4       	brne	.+6      	; 0x1fe <pollMotor+0x14>
		RUNPORTB = (TRUE<<RUNM0);
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <pollMotor+0x16>
	}
	else{
		RUNPORTB = (FALSE<<RUNM0);
 1fe:	15 b8       	out	0x05, r1	; 5
	}
	//chnange the rotating direction
	if(motor->directionToRotate == RIGHT){//rotate right
 200:	86 85       	ldd	r24, Z+14	; 0x0e
 202:	97 85       	ldd	r25, Z+15	; 0x0f
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	19 f4       	brne	.+6      	; 0x20e <pollMotor+0x24>
		DIRECTIONPORT = (RIGHT<<DIRM0);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	85 b9       	out	0x05, r24	; 5
 20c:	01 c0       	rjmp	.+2      	; 0x210 <pollMotor+0x26>
	}
	else{//rotate left
		DIRECTIONPORT = (LEFT<<ENCBM0);
 20e:	15 b8       	out	0x05, r1	; 5
	}
	//stop the motor if limits reached
	if((motor->relativeRevolutions>= motor->maxRevolutionsRight)||(motor->relativeRevolutions<=motor->maxRevolutionsLeft)){
 210:	84 81       	ldd	r24, Z+4	; 0x04
 212:	95 81       	ldd	r25, Z+5	; 0x05
 214:	20 85       	ldd	r18, Z+8	; 0x08
 216:	31 85       	ldd	r19, Z+9	; 0x09
 218:	82 17       	cp	r24, r18
 21a:	93 07       	cpc	r25, r19
 21c:	2c f4       	brge	.+10     	; 0x228 <pollMotor+0x3e>
 21e:	22 85       	ldd	r18, Z+10	; 0x0a
 220:	33 85       	ldd	r19, Z+11	; 0x0b
 222:	28 17       	cp	r18, r24
 224:	39 07       	cpc	r19, r25
 226:	14 f0       	brlt	.+4      	; 0x22c <pollMotor+0x42>
		motor->running = FALSE;
 228:	11 82       	std	Z+1, r1	; 0x01
 22a:	10 82       	st	Z, r1
 22c:	08 95       	ret

0000022e <main>:
void rotateRight();

int main(void){
	
	motorObjectSetup(M0);
	pinSetup();
 22e:	c3 df       	rcall	.-122    	; 0x1b6 <pinSetup>
	initialize();
 230:	d5 df       	rcall	.-86     	; 0x1dc <initialize>
	//sei();
	while(1){
		pollMotor(M0);
		PORTB = (1<<PB7);
 232:	c0 e8       	ldi	r28, 0x80	; 128
	motorObjectSetup(M0);
	pinSetup();
	initialize();
	//sei();
	while(1){
		pollMotor(M0);
 234:	80 91 00 02 	lds	r24, 0x0200
 238:	90 91 01 02 	lds	r25, 0x0201
 23c:	d6 df       	rcall	.-84     	; 0x1ea <pollMotor>
		PORTB = (1<<PB7);
 23e:	c5 b9       	out	0x05, r28	; 5
 240:	f9 cf       	rjmp	.-14     	; 0x234 <main+0x6>

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
