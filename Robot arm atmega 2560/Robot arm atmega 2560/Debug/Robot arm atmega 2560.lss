
Robot arm atmega 2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000002d0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000364  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000058  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000255  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000125  00000000  00000000  00000dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002ed  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e4  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b7  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000015d  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	d3 c0       	rjmp	.+422    	; 0x1ac <__vector_1>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__vector_10>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	ad d0       	rcall	.+346    	; 0x260 <main>
 106:	e2 c0       	rjmp	.+452    	; 0x2cc <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <motorObjectSetup>:
void pinSetup();//Setup DDR pins
void initialize();//Checks state of all Motors before executing the program.
void checkHomeSwiches(struct Motor *motor);//check the state of the position indicating switch of the motor.
void pollMotor(struct Motor *motor);//THE LOGIC IS HERE. Checks all the Motors and decide what to do.

void motorObjectSetup(struct Motor *motor){
 10a:	fc 01       	movw	r30, r24
	motor->running = TRUE;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	91 83       	std	Z+1, r25	; 0x01
 112:	80 83       	st	Z, r24
	motor->targetDirection = RIGHT;
 114:	97 87       	std	Z+15, r25	; 0x0f
 116:	86 87       	std	Z+14, r24	; 0x0e
	motor->maxRevolutionsLeft = -50;
 118:	8e ec       	ldi	r24, 0xCE	; 206
 11a:	9f ef       	ldi	r25, 0xFF	; 255
 11c:	93 87       	std	Z+11, r25	; 0x0b
 11e:	82 87       	std	Z+10, r24	; 0x0a
	motor->maxRevolutionsRight = 50;
 120:	82 e3       	ldi	r24, 0x32	; 50
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	91 87       	std	Z+9, r25	; 0x09
 126:	80 87       	std	Z+8, r24	; 0x08
	motor->relativeRevolutions = 0;
 128:	15 82       	std	Z+5, r1	; 0x05
 12a:	14 82       	std	Z+4, r1	; 0x04
	motor->targetPosition = -300;
 12c:	84 ed       	ldi	r24, 0xD4	; 212
 12e:	9e ef       	ldi	r25, 0xFE	; 254
 130:	91 8b       	std	Z+17, r25	; 0x11
 132:	80 8b       	std	Z+16, r24	; 0x10
 134:	08 95       	ret

00000136 <pinSetup>:

}

void pinSetup(){
	DDRJ = 0x0;//PCINT for switches
 136:	10 92 04 01 	sts	0x0104, r1
	//DDRD = 0x1E;//INT for Encoder-A
	//DDRE = 0xF0;//INT for Encoder-A
	DDRA = 0;
 13a:	11 b8       	out	0x01, r1	; 1
	
	//temp code
	DDRB = 0xFF;//PWM and Direction controlling
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	84 b9       	out	0x04, r24	; 4
	
	//end temp code
	
	
	//Setup external interrupts
	EIMSK = 0x01;//Enabling interrupts 7:0
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	9d bb       	out	0x1d, r25	; 29
	EICRA = 0xFF;//Enabling Rising edge interrupts for INT 3:0
 144:	80 93 69 00 	sts	0x0069, r24
	EICRB = 0xFF;//Enabling Rising edge interrupts for INT 7:4
 148:	80 93 6a 00 	sts	0x006A, r24
	
	//setup pin change interrupts
	PCMSK1 = 0xFF;//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0
 14c:	80 93 6c 00 	sts	0x006C, r24
	PCICR = (1<<PCIE1);//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0 
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 93 68 00 	sts	0x0068, r24
 156:	08 95       	ret

00000158 <checkHomeSwiches>:
	
}
//more work here:How to pass SWM0????
void checkHomeSwiches(struct Motor *motor){
	if(SWM0 == SWITCHE_PRESSED){
		motor->HomeSwitchState = SWITCHE_PRESSED;
 158:	fc 01       	movw	r30, r24
 15a:	17 82       	std	Z+7, r1	; 0x07
 15c:	16 82       	std	Z+6, r1	; 0x06
 15e:	08 95       	ret

00000160 <initialize>:
	//setup pin change interrupts
	PCMSK1 = 0xFF;//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0
	PCICR = (1<<PCIE1);//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0 
}
void initialize(){
	checkHomeSwiches(M0);
 160:	80 91 00 02 	lds	r24, 0x0200
 164:	90 91 01 02 	lds	r25, 0x0201
 168:	f7 cf       	rjmp	.-18     	; 0x158 <checkHomeSwiches>

0000016a <pollMotor>:
	else{
		motor->HomeSwitchState = !SWITCHE_PRESSED;
	}
}

void pollMotor(struct Motor *motor){
 16a:	fc 01       	movw	r30, r24
	//run/stop motor
	if(motor->running == TRUE){
 16c:	80 81       	ld	r24, Z
 16e:	91 81       	ldd	r25, Z+1	; 0x01
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	11 f4       	brne	.+4      	; 0x178 <pollMotor+0xe>
		ENABLE_PORT1 |= (TRUE<<ENM0);
 174:	2c 9a       	sbi	0x05, 4	; 5
 176:	01 c0       	rjmp	.+2      	; 0x17a <pollMotor+0x10>
	}
	else{
		ENABLE_PORT1 &= ~(TRUE<<ENM0);
 178:	2c 98       	cbi	0x05, 4	; 5
	}
	//change the rotating direction
	if(motor->targetDirection == RIGHT){//rotate right
 17a:	86 85       	ldd	r24, Z+14	; 0x0e
 17c:	97 85       	ldd	r25, Z+15	; 0x0f
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 05       	cpc	r25, r1
 182:	11 f4       	brne	.+4      	; 0x188 <pollMotor+0x1e>
		DIRECTION_PORT |= (RIGHT<<DIRM0);
 184:	28 9a       	sbi	0x05, 0	; 5
 186:	03 c0       	rjmp	.+6      	; 0x18e <pollMotor+0x24>
	}
	else if(motor->targetDirection == LEFT){//rotate left
 188:	89 2b       	or	r24, r25
 18a:	09 f4       	brne	.+2      	; 0x18e <pollMotor+0x24>
		DIRECTION_PORT &= ~(RIGHT<<DIRM0);
 18c:	28 98       	cbi	0x05, 0	; 5
	}
	//stop the motor if safety limits reached
	if(((motor->relativeRevolutions)>= (motor->maxRevolutionsRight))||((motor->relativeRevolutions)<=(motor->maxRevolutionsLeft))){
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	20 85       	ldd	r18, Z+8	; 0x08
 194:	31 85       	ldd	r19, Z+9	; 0x09
 196:	82 17       	cp	r24, r18
 198:	93 07       	cpc	r25, r19
 19a:	2c f4       	brge	.+10     	; 0x1a6 <pollMotor+0x3c>
 19c:	22 85       	ldd	r18, Z+10	; 0x0a
 19e:	33 85       	ldd	r19, Z+11	; 0x0b
 1a0:	28 17       	cp	r18, r24
 1a2:	39 07       	cpc	r19, r25
 1a4:	14 f0       	brlt	.+4      	; 0x1aa <pollMotor+0x40>
		motor->running = FALSE;
 1a6:	11 82       	std	Z+1, r1	; 0x01
 1a8:	10 82       	st	Z, r1
 1aa:	08 95       	ret

000001ac <__vector_1>:
*Motor 0:Encoder pin A:Rising Edge Detecting Function
*Counts encoder ticks
*Updates the direction of the Motor
*/

ISR(ENCAM0_EINTVECT){
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	0b b6       	in	r0, 0x3b	; 59
 1b8:	0f 92       	push	r0
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	cli();
 1c2:	f8 94       	cli
	if((ENCB_PIN&0x1)==0x1){
 1c4:	00 9b       	sbis	0x00, 0	; 0
 1c6:	0e c0       	rjmp	.+28     	; 0x1e4 <__vector_1+0x38>
		M0->relativeRevolutions++;
 1c8:	e0 91 00 02 	lds	r30, 0x0200
 1cc:	f0 91 01 02 	lds	r31, 0x0201
 1d0:	84 81       	ldd	r24, Z+4	; 0x04
 1d2:	95 81       	ldd	r25, Z+5	; 0x05
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	95 83       	std	Z+5, r25	; 0x05
 1d8:	84 83       	std	Z+4, r24	; 0x04
		M0->direction = RISEnHIGHDIR;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	93 83       	std	Z+3, r25	; 0x03
 1e0:	82 83       	std	Z+2, r24	; 0x02
 1e2:	0b c0       	rjmp	.+22     	; 0x1fa <__vector_1+0x4e>
		
	}
	else{
		M0->relativeRevolutions--;
 1e4:	e0 91 00 02 	lds	r30, 0x0200
 1e8:	f0 91 01 02 	lds	r31, 0x0201
 1ec:	84 81       	ldd	r24, Z+4	; 0x04
 1ee:	95 81       	ldd	r25, Z+5	; 0x05
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	95 83       	std	Z+5, r25	; 0x05
 1f4:	84 83       	std	Z+4, r24	; 0x04
		M0->direction = RISEnLOWDIR;
 1f6:	13 82       	std	Z+3, r1	; 0x03
 1f8:	12 82       	std	Z+2, r1	; 0x02
	}
	sei();
 1fa:	78 94       	sei
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0b be       	out	0x3b, r0	; 59
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <__vector_10>:

/*
*Motor 0:Home Switch state:Pin Change Detecting Function
*Toggles the  homeSwitchState attribute of the motor
*/
ISR(SWM0_PCINTVECT){
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	0b b6       	in	r0, 0x3b	; 59
 21e:	0f 92       	push	r0
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	cli();
 228:	f8 94       	cli
	//toggle the state of home switch state
	if(M0->HomeSwitchState == TRUE){
 22a:	e0 91 00 02 	lds	r30, 0x0200
 22e:	f0 91 01 02 	lds	r31, 0x0201
 232:	86 81       	ldd	r24, Z+6	; 0x06
 234:	97 81       	ldd	r25, Z+7	; 0x07
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	19 f4       	brne	.+6      	; 0x240 <__vector_10+0x2e>
		M0->HomeSwitchState = FALSE;
 23a:	17 82       	std	Z+7, r1	; 0x07
 23c:	16 82       	std	Z+6, r1	; 0x06
 23e:	04 c0       	rjmp	.+8      	; 0x248 <__vector_10+0x36>
	}
	else{
		M0->HomeSwitchState =TRUE;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	97 83       	std	Z+7, r25	; 0x07
 246:	86 83       	std	Z+6, r24	; 0x06
	}
	sei();
 248:	78 94       	sei
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0b be       	out	0x3b, r0	; 59
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <main>:
*Seven Motor structures for seven motors.
*Commands and Interrupts change the attribute of each Motor
*Poll function then make the decision by looking at each Motor structure
*/

int main(void){
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	62 97       	sbiw	r28, 0x12	; 18
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
	struct Motor MtestM;
	M0 = &MtestM;
 274:	ce 01       	movw	r24, r28
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	90 93 01 02 	sts	0x0201, r25
 27c:	80 93 00 02 	sts	0x0200, r24
	cli();
 280:	f8 94       	cli
	pinSetup();
 282:	59 df       	rcall	.-334    	; 0x136 <pinSetup>
	initialize();
 284:	6d df       	rcall	.-294    	; 0x160 <initialize>
	motorObjectSetup(M0);
 286:	80 91 00 02 	lds	r24, 0x0200
 28a:	90 91 01 02 	lds	r25, 0x0201
 28e:	3d df       	rcall	.-390    	; 0x10a <motorObjectSetup>
	M0->maxRevolutionsRight=50;
 290:	e0 91 00 02 	lds	r30, 0x0200
 294:	f0 91 01 02 	lds	r31, 0x0201
 298:	82 e3       	ldi	r24, 0x32	; 50
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	91 87       	std	Z+9, r25	; 0x09
 29e:	80 87       	std	Z+8, r24	; 0x08
	M0->maxRevolutionsLeft = -50;
 2a0:	8e ec       	ldi	r24, 0xCE	; 206
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	93 87       	std	Z+11, r25	; 0x0b
 2a6:	82 87       	std	Z+10, r24	; 0x0a
	M0->targetDirection = LEFT;
 2a8:	17 86       	std	Z+15, r1	; 0x0f
 2aa:	16 86       	std	Z+14, r1	; 0x0e
	M0->running = TRUE;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	91 83       	std	Z+1, r25	; 0x01
 2b2:	80 83       	st	Z, r24
 	pollMotor(M0);
 2b4:	80 91 00 02 	lds	r24, 0x0200
 2b8:	90 91 01 02 	lds	r25, 0x0201
 2bc:	56 df       	rcall	.-340    	; 0x16a <pollMotor>
  	PORTB |= (1<<PB7);
  	_delay_ms(500);
  	PORTB &= ~(1<<PB7);
  	_delay_ms(500);
	  */
	  sei();
 2be:	78 94       	sei
	

	
	while(1){
		pollMotor(M0);
 2c0:	80 91 00 02 	lds	r24, 0x0200
 2c4:	90 91 01 02 	lds	r25, 0x0201
 2c8:	50 df       	rcall	.-352    	; 0x16a <pollMotor>
 2ca:	fa cf       	rjmp	.-12     	; 0x2c0 <main+0x60>

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
