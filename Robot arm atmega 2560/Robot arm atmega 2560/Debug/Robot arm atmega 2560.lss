
Robot arm atmega 2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800200  00800200  000003ae  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b2b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000070  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000029f  00000000  00000000  00000bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000127  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000029c  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d8  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ca  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000368  00000000  00000000  000015ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00001936  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__vector_1>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	a9 c0       	rjmp	.+338    	; 0x178 <__vector_9>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 31       	cpi	r26, 0x10	; 16
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	e3 d0       	rcall	.+454    	; 0x2cc <main>
 106:	07 c1       	rjmp	.+526    	; 0x316 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_1>:
	tempMotor.maxRevolutionsRight = 100;
	tempMotor.relativeRevolutions = 0;
	
	return tempMotor;

}
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
 120:	80 91 0c 02 	lds	r24, 0x020C
 124:	90 91 0d 02 	lds	r25, 0x020D
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	71 f4       	brne	.+28     	; 0x148 <__vector_1+0x3e>
 12c:	e4 e0       	ldi	r30, 0x04	; 4
 12e:	f2 e0       	ldi	r31, 0x02	; 2
 130:	80 81       	ld	r24, Z
 132:	91 81       	ldd	r25, Z+1	; 0x01
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	91 83       	std	Z+1, r25	; 0x01
 138:	80 83       	st	Z, r24
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 03 02 	sts	0x0203, r25
 142:	80 93 02 02 	sts	0x0202, r24
 146:	0d c0       	rjmp	.+26     	; 0x162 <__vector_1+0x58>
 148:	e4 e0       	ldi	r30, 0x04	; 4
 14a:	f2 e0       	ldi	r31, 0x02	; 2
 14c:	80 81       	ld	r24, Z
 14e:	91 81       	ldd	r25, Z+1	; 0x01
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	91 83       	std	Z+1, r25	; 0x01
 154:	80 83       	st	Z, r24
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	9f ef       	ldi	r25, 0xFF	; 255
 15a:	90 93 03 02 	sts	0x0203, r25
 15e:	80 93 02 02 	sts	0x0202, r24
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0b be       	out	0x3b, r0	; 59
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_9>:
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	80 91 06 02 	lds	r24, 0x0206
 18a:	90 91 07 02 	lds	r25, 0x0207
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	29 f4       	brne	.+10     	; 0x19c <__vector_9+0x24>
 192:	10 92 07 02 	sts	0x0207, r1
 196:	10 92 06 02 	sts	0x0206, r1
 19a:	06 c0       	rjmp	.+12     	; 0x1a8 <__vector_9+0x30>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 07 02 	sts	0x0207, r25
 1a4:	80 93 06 02 	sts	0x0206, r24
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <pinSetup>:

void pinSetup(){
	DDRJ = 0x0;//PCINT for switches
 1b6:	10 92 04 01 	sts	0x0104, r1
	DDRD = 0x1E;//INT for Encoder-A
 1ba:	8e e1       	ldi	r24, 0x1E	; 30
 1bc:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0xF0;//INT for Encoder-A
 1be:	80 ef       	ldi	r24, 0xF0	; 240
 1c0:	8d b9       	out	0x0d, r24	; 13
	
	//temp code
	DDRB = 0xFF;//PWM and Direction controlling
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	84 b9       	out	0x04, r24	; 4
	
	//end temp code
	
	
	//Setup external interrupts
	EIMSK = 0xFF;//Enabling interrups 7:0
 1c6:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0xFF;//Enabling Rising edge interrupts for INT 3:0
 1c8:	80 93 69 00 	sts	0x0069, r24
	EICRB = 0xFF;//Enabling Rising edge interrupst for INT 7:4
 1cc:	80 93 6a 00 	sts	0x006A, r24
	//setup pin change interrups
	PCMSK1 = 0xFF;//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0
 1d0:	80 93 6c 00 	sts	0x006C, r24
	PCICR = (1<<PCIE1);//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0 
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 68 00 	sts	0x0068, r24
 1da:	08 95       	ret

000001dc <checkHomeSwiches>:
	
}

/*INIT UTILITIES*/

void checkHomeSwiches(struct Motor motor){
 1dc:	af 92       	push	r10
 1de:	bf 92       	push	r11
 1e0:	cf 92       	push	r12
 1e2:	df 92       	push	r13
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	60 97       	sbiw	r28, 0x10	; 16
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
	//set the switch state before begin
	//have to write following code for each motor
	if(SWM0 == SWITCHE_PRESSED){
		M0.HomeSwitchState = SWITCHE_PRESSED;
 200:	10 92 07 02 	sts	0x0207, r1
 204:	10 92 06 02 	sts	0x0206, r1
	}
	else{
		M0.HomeSwitchState = !SWITCHE_PRESSED;
	}
}
 208:	60 96       	adiw	r28, 0x10	; 16
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	df 90       	pop	r13
 222:	cf 90       	pop	r12
 224:	bf 90       	pop	r11
 226:	af 90       	pop	r10
 228:	08 95       	ret

0000022a <initialize>:
	//setup pin change interrups
	PCMSK1 = 0xFF;//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0
	PCICR = (1<<PCIE1);//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0 
}
void initialize(){
	checkHomeSwiches();
 22a:	d8 cf       	rjmp	.-80     	; 0x1dc <checkHomeSwiches>
 22c:	08 95       	ret

0000022e <pollMotor>:
	}
}

//main poll function
//only for testing M0
void pollMotor(struct Motor motor){
 22e:	af 92       	push	r10
 230:	bf 92       	push	r11
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	60 97       	sbiw	r28, 0x10	; 16
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
 252:	a9 82       	std	Y+1, r10	; 0x01
 254:	ba 82       	std	Y+2, r11	; 0x02
 256:	8f 87       	std	Y+15, r24	; 0x0f
 258:	98 8b       	std	Y+16, r25	; 0x10
	//run stop motor
	PORTB = (1<<PB7);
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	85 b9       	out	0x05, r24	; 5
	if(motor.running == TRUE){
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	19 f4       	brne	.+6      	; 0x26c <pollMotor+0x3e>
		RUNPORTB = (TRUE<<RUNM0);
 266:	80 e1       	ldi	r24, 0x10	; 16
 268:	85 b9       	out	0x05, r24	; 5
 26a:	01 c0       	rjmp	.+2      	; 0x26e <pollMotor+0x40>
	}
	else{
		RUNPORTB = (FALSE<<RUNM0);
 26c:	15 b8       	out	0x05, r1	; 5
	}
	//chnange the rotating direction
	if(motor.directionToRotate == RIGHT){//rotate right
 26e:	8f 85       	ldd	r24, Y+15	; 0x0f
 270:	98 89       	ldd	r25, Y+16	; 0x10
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	19 f4       	brne	.+6      	; 0x27c <pollMotor+0x4e>
		DIRECTIONPORT = (RIGHT<<DIRM0);
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	85 b9       	out	0x05, r24	; 5
 27a:	01 c0       	rjmp	.+2      	; 0x27e <pollMotor+0x50>
	}
	else{//rotate left
		DIRECTIONPORT = (LEFT<<ENCBM0);
 27c:	15 b8       	out	0x05, r1	; 5
	}
	//stop the morot if limites reached
	if((M0.relativeRevolutions>= M0.maxRevolutionsRight)||(M0.relativeRevolutions<=M0.maxRevolutionsLeft)){
 27e:	80 91 04 02 	lds	r24, 0x0204
 282:	90 91 05 02 	lds	r25, 0x0205
 286:	20 91 08 02 	lds	r18, 0x0208
 28a:	30 91 09 02 	lds	r19, 0x0209
 28e:	82 17       	cp	r24, r18
 290:	93 07       	cpc	r25, r19
 292:	3c f4       	brge	.+14     	; 0x2a2 <pollMotor+0x74>
 294:	20 91 0a 02 	lds	r18, 0x020A
 298:	30 91 0b 02 	lds	r19, 0x020B
 29c:	28 17       	cp	r18, r24
 29e:	39 07       	cpc	r19, r25
 2a0:	24 f0       	brlt	.+8      	; 0x2aa <pollMotor+0x7c>
		M0.running = FALSE;
 2a2:	10 92 01 02 	sts	0x0201, r1
 2a6:	10 92 00 02 	sts	0x0200, r1
	}
	
}
 2aa:	60 96       	adiw	r28, 0x10	; 16
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	08 95       	ret

000002cc <main>:


int main(void){
	
	//M0 = motorObjectSetup();
	pinSetup();
 2cc:	74 df       	rcall	.-280    	; 0x1b6 <pinSetup>
	initialize();
 2ce:	ad df       	rcall	.-166    	; 0x22a <initialize>
	sei();
 2d0:	78 94       	sei
	while(1){
		pollMotor(M0);
 2d2:	a0 90 00 02 	lds	r10, 0x0200
 2d6:	b0 90 01 02 	lds	r11, 0x0201
 2da:	c0 90 02 02 	lds	r12, 0x0202
 2de:	d0 90 03 02 	lds	r13, 0x0203
 2e2:	e0 90 04 02 	lds	r14, 0x0204
 2e6:	f0 90 05 02 	lds	r15, 0x0205
 2ea:	00 91 06 02 	lds	r16, 0x0206
 2ee:	10 91 07 02 	lds	r17, 0x0207
 2f2:	20 91 08 02 	lds	r18, 0x0208
 2f6:	30 91 09 02 	lds	r19, 0x0209
 2fa:	40 91 0a 02 	lds	r20, 0x020A
 2fe:	50 91 0b 02 	lds	r21, 0x020B
 302:	60 91 0c 02 	lds	r22, 0x020C
 306:	70 91 0d 02 	lds	r23, 0x020D
 30a:	80 91 0e 02 	lds	r24, 0x020E
 30e:	90 91 0f 02 	lds	r25, 0x020F
 312:	8d df       	rcall	.-230    	; 0x22e <pollMotor>
 314:	de cf       	rjmp	.-68     	; 0x2d2 <main+0x6>

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
