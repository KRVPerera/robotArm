
Robot arm atmega 2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000000  00800200  000002de  00000372  2**0
=======
<<<<<<< HEAD
  0 .data         00000000  00800200  00000246  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002cb  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016f  00000000  00000000  0000063d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000257  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000241  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00000e4f  2**0
=======
  0 .data         00000000  00800200  00000342  000003d6  2**0
>>>>>>> eeee515d7a36fddddef69784b8772d53cb6268ae
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000372  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000aef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000351  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001a4  00000000  00000000  00000ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000035b  00000000  00000000  00001073  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f4  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000021f  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000015d  00000000  00000000  000016e3  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 13 .debug_ranges 00000050  00000000  00000000  00001840  2**0
=======
 13 .debug_ranges 00000058  00000000  00000000  00001a82  2**0
>>>>>>> c1d778d9278ba6bb1e03f0d0267254f1260e6b08
>>>>>>> eeee515d7a36fddddef69784b8772d53cb6268ae
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__vector_1>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	a3 c0       	rjmp	.+326    	; 0x170 <__vector_10>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
<<<<<<< HEAD
 104:	cb d0       	rcall	.+406    	; 0x29c <main>
 106:	e9 c0       	rjmp	.+466    	; 0x2da <_exit>
=======
<<<<<<< HEAD
 104:	94 d0       	rcall	.+296    	; 0x22e <main>
 106:	9d c0       	rjmp	.+314    	; 0x242 <_exit>
=======
 104:	b6 d0       	rcall	.+364    	; 0x272 <main>
 106:	1b c1       	rjmp	.+566    	; 0x33e <_exit>
>>>>>>> c1d778d9278ba6bb1e03f0d0267254f1260e6b08
>>>>>>> eeee515d7a36fddddef69784b8772d53cb6268ae

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_1>:
<<<<<<< HEAD
/*
*Motor 0:Encoder pin A:Rising Edge Detecting Function
*Counts encoder ticks
*Updates the direction of the Motor
*/
ISR(ENCAM0_EINTVECT){
=======
<<<<<<< HEAD

void checkHomeSwiches(struct Motor *motor){
	//set the switch state before begin
	//have to write following code for each motor
	if(SWM0 == SWITCHE_PRESSED){
		motor->HomeSwitchState = SWITCHE_PRESSED;
=======
	COMMANDS
*/
//this is a command function to stop at home
void stopAtHome(struct Motor *motor){
	if(motor->HomeSwitchState == TRUE){
		motor->running = FALSE;
>>>>>>> c1d778d9278ba6bb1e03f0d0267254f1260e6b08
>>>>>>> eeee515d7a36fddddef69784b8772d53cb6268ae
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	cli();
 120:	f8 94       	cli
	if((ENCB_PIN&0x1)==0x1){
 122:	00 9b       	sbis	0x00, 0	; 0
 124:	0e c0       	rjmp	.+28     	; 0x142 <__vector_1+0x38>
		M0->relativeRevolutions++;
 126:	e0 91 00 02 	lds	r30, 0x0200
 12a:	f0 91 01 02 	lds	r31, 0x0201
 12e:	84 81       	ldd	r24, Z+4	; 0x04
 130:	95 81       	ldd	r25, Z+5	; 0x05
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	95 83       	std	Z+5, r25	; 0x05
 136:	84 83       	std	Z+4, r24	; 0x04
		M0->direction = RISEnHIGHDIR;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	93 83       	std	Z+3, r25	; 0x03
 13e:	82 83       	std	Z+2, r24	; 0x02
 140:	0b c0       	rjmp	.+22     	; 0x158 <__vector_1+0x4e>
		
	}
	else{
		M0->relativeRevolutions--;
 142:	e0 91 00 02 	lds	r30, 0x0200
 146:	f0 91 01 02 	lds	r31, 0x0201
 14a:	84 81       	ldd	r24, Z+4	; 0x04
 14c:	95 81       	ldd	r25, Z+5	; 0x05
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	95 83       	std	Z+5, r25	; 0x05
 152:	84 83       	std	Z+4, r24	; 0x04
		M0->direction = RISEnLOWDIR;
 154:	13 82       	std	Z+3, r1	; 0x03
 156:	12 82       	std	Z+2, r1	; 0x02
	}
	sei();
 158:	78 94       	sei
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0b be       	out	0x3b, r0	; 59
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_10>:

/*
*Motor 0:Home Switch state:Pin Change Detecting Function
*Toggles the  homeSwitchState attribute of the motor
*/
ISR(SWM0_PCINTVECT){
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	cli();
 186:	f8 94       	cli
	//toggle the state of home switch state
	if(M0->HomeSwitchState == TRUE){
 188:	e0 91 00 02 	lds	r30, 0x0200
 18c:	f0 91 01 02 	lds	r31, 0x0201
 190:	86 81       	ldd	r24, Z+6	; 0x06
 192:	97 81       	ldd	r25, Z+7	; 0x07
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	19 f4       	brne	.+6      	; 0x19e <__vector_10+0x2e>
		M0->HomeSwitchState = FALSE;
 198:	17 82       	std	Z+7, r1	; 0x07
 19a:	16 82       	std	Z+6, r1	; 0x06
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__vector_10+0x36>
	}
	else{
		M0->HomeSwitchState =TRUE;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	97 83       	std	Z+7, r25	; 0x07
 1a4:	86 83       	std	Z+6, r24	; 0x06
	}
	sei();
 1a6:	78 94       	sei
}
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0b be       	out	0x3b, r0	; 59
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

<<<<<<< HEAD
000001b6 <pinSetup>:
 1b6:	10 92 04 01 	sts	0x0104, r1
 1ba:	8e e1       	ldi	r24, 0x1E	; 30
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	80 ef       	ldi	r24, 0xF0	; 240
 1c0:	8d b9       	out	0x0d, r24	; 13
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	84 b9       	out	0x04, r24	; 4
 1c6:	8d bb       	out	0x1d, r24	; 29
 1c8:	80 93 69 00 	sts	0x0069, r24
 1cc:	80 93 6a 00 	sts	0x006A, r24
 1d0:	80 93 6c 00 	sts	0x006C, r24
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 68 00 	sts	0x0068, r24
 1da:	08 95       	ret

000001dc <initialize>:
 1dc:	e0 91 00 02 	lds	r30, 0x0200
 1e0:	f0 91 01 02 	lds	r31, 0x0201
 1e4:	17 82       	std	Z+7, r1	; 0x07
 1e6:	16 82       	std	Z+6, r1	; 0x06
 1e8:	08 95       	ret

000001ea <pollMotor>:
=======
000001be <motorObjectSetup>:


void motorObjectSetup(struct Motor *motor){
 1be:	fc 01       	movw	r30, r24
	motor->running = TRUE;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	91 83       	std	Z+1, r25	; 0x01
 1c6:	80 83       	st	Z, r24
	motor->directionToRotate = LEFT;
 1c8:	17 86       	std	Z+15, r1	; 0x0f
 1ca:	16 86       	std	Z+14, r1	; 0x0e
	motor->maxRevolutionsLeft = -1000;
 1cc:	88 e1       	ldi	r24, 0x18	; 24
 1ce:	9c ef       	ldi	r25, 0xFC	; 252
 1d0:	93 87       	std	Z+11, r25	; 0x0b
 1d2:	82 87       	std	Z+10, r24	; 0x0a
	motor->maxRevolutionsRight = 1000;
 1d4:	88 ee       	ldi	r24, 0xE8	; 232
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	91 87       	std	Z+9, r25	; 0x09
 1da:	80 87       	std	Z+8, r24	; 0x08
	motor->relativeRevolutions = 0;
 1dc:	15 82       	std	Z+5, r1	; 0x05
 1de:	14 82       	std	Z+4, r1	; 0x04
 1e0:	08 95       	ret

000001e2 <pinSetup>:

}

void pinSetup(){
	DDRJ = 0x0;//PCINT for switches
 1e2:	10 92 04 01 	sts	0x0104, r1
	DDRD = 0x1E;//INT for Encoder-A
 1e6:	8e e1       	ldi	r24, 0x1E	; 30
 1e8:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0xF0;//INT for Encoder-A
 1ea:	80 ef       	ldi	r24, 0xF0	; 240
 1ec:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0;
 1ee:	11 b8       	out	0x01, r1	; 1
	
	//temp code
	DDRB = 0xFF;//PWM and Direction controlling
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	84 b9       	out	0x04, r24	; 4
	
	//end temp code
	
	
	//Setup external interrupts
	EIMSK = 0xFF;//Enabling interrupts 7:0
 1f4:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0xFF;//Enabling Rising edge interrupts for INT 3:0
 1f6:	80 93 69 00 	sts	0x0069, r24
	EICRB = 0xFF;//Enabling Rising edge interrupts for INT 7:4
 1fa:	80 93 6a 00 	sts	0x006A, r24
	//setup pin change interrupts
	PCMSK1 = 0xFF;//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0
 1fe:	80 93 6c 00 	sts	0x006C, r24
	PCICR = (1<<PCIE1);//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0 
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	80 93 68 00 	sts	0x0068, r24
 208:	08 95       	ret

0000020a <checkHomeSwiches>:
	
}
//more work here:How to pass SWM0????
void checkHomeSwiches(struct Motor *motor){
	if(SWM0 == SWITCHE_PRESSED){
		motor->HomeSwitchState = SWITCHE_PRESSED;
 20a:	fc 01       	movw	r30, r24
 20c:	17 82       	std	Z+7, r1	; 0x07
 20e:	16 82       	std	Z+6, r1	; 0x06
 210:	08 95       	ret

00000212 <initialize>:
	//setup pin change interrupts
	PCMSK1 = 0xFF;//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0
	PCICR = (1<<PCIE1);//Enabling PCinterrupts 15:8, but we want only 15:9/J6:J0 
}
void initialize(){
	checkHomeSwiches(M0);
 212:	80 91 00 02 	lds	r24, 0x0200
 216:	90 91 01 02 	lds	r25, 0x0201
 21a:	f7 cf       	rjmp	.-18     	; 0x20a <checkHomeSwiches>

0000021c <pollMotor>:
<<<<<<< HEAD
	else{
		motor->HomeSwitchState = !SWITCHE_PRESSED;
=======
>>>>>>> c1d778d9278ba6bb1e03f0d0267254f1260e6b08
>>>>>>> eeee515d7a36fddddef69784b8772d53cb6268ae
	}
}

void pollMotor(struct Motor *motor){
<<<<<<< HEAD
 1ea:	fc 01       	movw	r30, r24
	PORTB = (1<<PB7);//test led
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	85 b9       	out	0x05, r24	; 5
	//run stop motor
	if(motor->running == TRUE){
 1f0:	80 81       	ld	r24, Z
 1f2:	91 81       	ldd	r25, Z+1	; 0x01
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	19 f4       	brne	.+6      	; 0x1fe <pollMotor+0x14>
		RUNPORTB = (TRUE<<RUNM0);
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <pollMotor+0x16>
	}
	else{
		RUNPORTB = (FALSE<<RUNM0);
 1fe:	15 b8       	out	0x05, r1	; 5
	}
	//chnange the rotating direction
	if(motor->directionToRotate == RIGHT){//rotate right
 200:	86 85       	ldd	r24, Z+14	; 0x0e
 202:	97 85       	ldd	r25, Z+15	; 0x0f
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	19 f4       	brne	.+6      	; 0x20e <pollMotor+0x24>
		DIRECTIONPORT = (RIGHT<<DIRM0);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	85 b9       	out	0x05, r24	; 5
 20c:	01 c0       	rjmp	.+2      	; 0x210 <pollMotor+0x26>
	}
	else{//rotate left
		DIRECTIONPORT = (LEFT<<ENCBM0);
 20e:	15 b8       	out	0x05, r1	; 5
	}
	//stop the motor if limits reached
	if((motor->relativeRevolutions>= motor->maxRevolutionsRight)||(motor->relativeRevolutions<=motor->maxRevolutionsLeft)){
 210:	84 81       	ldd	r24, Z+4	; 0x04
 212:	95 81       	ldd	r25, Z+5	; 0x05
 214:	20 85       	ldd	r18, Z+8	; 0x08
 216:	31 85       	ldd	r19, Z+9	; 0x09
 218:	82 17       	cp	r24, r18
 21a:	93 07       	cpc	r25, r19
 21c:	2c f4       	brge	.+10     	; 0x228 <pollMotor+0x3e>
 21e:	22 85       	ldd	r18, Z+10	; 0x0a
 220:	33 85       	ldd	r19, Z+11	; 0x0b
 222:	28 17       	cp	r18, r24
 224:	39 07       	cpc	r19, r25
 226:	14 f0       	brlt	.+4      	; 0x22c <pollMotor+0x42>
		motor->running = FALSE;
 228:	11 82       	std	Z+1, r1	; 0x01
 22a:	10 82       	st	Z, r1
 22c:	08 95       	ret

0000022e <main>:
=======
 21c:	fc 01       	movw	r30, r24
	//run/stop motor
	if(motor->running == TRUE){
 21e:	80 81       	ld	r24, Z
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	19 f4       	brne	.+6      	; 0x22c <pollMotor+0x10>
		ENABLE_PORT1 = (TRUE<<ENM0);
 226:	80 e1       	ldi	r24, 0x10	; 16
 228:	85 b9       	out	0x05, r24	; 5
 22a:	01 c0       	rjmp	.+2      	; 0x22e <pollMotor+0x12>
	}
	else{
		ENABLE_PORT1 = (FALSE<<ENM0);
 22c:	15 b8       	out	0x05, r1	; 5
	}
	//change the rotating direction
	if(motor->directionToRotate == RIGHT){//rotate right
 22e:	86 85       	ldd	r24, Z+14	; 0x0e
 230:	97 85       	ldd	r25, Z+15	; 0x0f
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	91 05       	cpc	r25, r1
 236:	11 f4       	brne	.+4      	; 0x23c <pollMotor+0x20>
		DIRECTION_PORT = (RIGHT<<DIRM0)|(DIRECTION_PORT);
 238:	28 9a       	sbi	0x05, 0	; 5
 23a:	04 c0       	rjmp	.+8      	; 0x244 <pollMotor+0x28>
	}
	else if(motor->directionToRotate == LEFT){//rotate left
 23c:	89 2b       	or	r24, r25
 23e:	11 f4       	brne	.+4      	; 0x244 <pollMotor+0x28>
		DIRECTION_PORT = (LEFT<<DIRM0)|(DIRECTION_PORT);
 240:	85 b1       	in	r24, 0x05	; 5
 242:	85 b9       	out	0x05, r24	; 5
	}
	//stop the motor if safety limits reached
	if(((motor->relativeRevolutions)>= (motor->maxRevolutionsRight))||((motor->relativeRevolutions)<=(motor->maxRevolutionsLeft))){
 244:	84 81       	ldd	r24, Z+4	; 0x04
 246:	95 81       	ldd	r25, Z+5	; 0x05
 248:	20 85       	ldd	r18, Z+8	; 0x08
 24a:	31 85       	ldd	r19, Z+9	; 0x09
 24c:	82 17       	cp	r24, r18
 24e:	93 07       	cpc	r25, r19
 250:	2c f4       	brge	.+10     	; 0x25c <pollMotor+0x40>
 252:	22 85       	ldd	r18, Z+10	; 0x0a
 254:	33 85       	ldd	r19, Z+11	; 0x0b
 256:	28 17       	cp	r18, r24
 258:	39 07       	cpc	r19, r25
 25a:	14 f0       	brlt	.+4      	; 0x260 <pollMotor+0x44>
		motor->running = FALSE;
 25c:	11 82       	std	Z+1, r1	; 0x01
 25e:	10 82       	st	Z, r1
 260:	08 95       	ret

00000262 <testNow>:

<<<<<<< HEAD
	
}

void testNow(){
	PORTB = ((1<<PB7)|(PORTB));
 262:	2f 9a       	sbi	0x05, 7	; 5
=======
//commands
void stopAtHome();//stops the motors if they are in home position
>>>>>>> c1d778d9278ba6bb1e03f0d0267254f1260e6b08
void rotateRight();

int main(void){
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	60 97       	sbiw	r28, 0x10	; 16
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
	struct Motor MtestM;
	M0 = &MtestM;
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	90 93 01 02 	sts	0x0201, r25
 28e:	80 93 00 02 	sts	0x0200, r24
	pinSetup();
<<<<<<< HEAD
 22e:	c3 df       	rcall	.-122    	; 0x1b6 <pinSetup>
	initialize();
 230:	d5 df       	rcall	.-86     	; 0x1dc <initialize>
	//sei();
	while(1){
		pollMotor(M0);
		PORTB = (1<<PB7);
 232:	c0 e8       	ldi	r28, 0x80	; 128
	motorObjectSetup(M0);
	pinSetup();
	initialize();
	//sei();
=======
 292:	a7 df       	rcall	.-178    	; 0x1e2 <pinSetup>
	sei();//enable global interrupt
 294:	78 94       	sei
	motorObjectSetup(M0);
 296:	80 91 00 02 	lds	r24, 0x0200
 29a:	90 91 01 02 	lds	r25, 0x0201
 29e:	8f df       	rcall	.-226    	; 0x1be <motorObjectSetup>
	initialize();
 2a0:	b8 df       	rcall	.-144    	; 0x212 <initialize>
	//test start
	PORTB = (1<<PB7);
 2a2:	80 e8       	ldi	r24, 0x80	; 128
 2a4:	85 b9       	out	0x05, r24	; 5
>>>>>>> eeee515d7a36fddddef69784b8772d53cb6268ae
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	89 e6       	ldi	r24, 0x69	; 105
 268:	98 e1       	ldi	r25, 0x18	; 24
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <testNow+0x8>
 272:	00 c0       	rjmp	.+0      	; 0x274 <testNow+0x12>
 274:	00 00       	nop
	_delay_ms(500);
	PORTB = ((0<<PB7)|(PORTB));
 276:	85 b1       	in	r24, 0x05	; 5
 278:	85 b9       	out	0x05, r24	; 5
 27a:	ef ef       	ldi	r30, 0xFF	; 255
 27c:	f9 e6       	ldi	r31, 0x69	; 105
 27e:	28 e1       	ldi	r18, 0x18	; 24
 280:	e1 50       	subi	r30, 0x01	; 1
 282:	f0 40       	sbci	r31, 0x00	; 0
 284:	20 40       	sbci	r18, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <testNow+0x1e>
 288:	00 c0       	rjmp	.+0      	; 0x28a <testNow+0x28>
 28a:	00 00       	nop
	_delay_ms(500);
	
	M0->directionToRotate = LEFT;
 28c:	80 91 00 02 	lds	r24, 0x0200
 290:	90 91 01 02 	lds	r25, 0x0201
 294:	fc 01       	movw	r30, r24
 296:	17 86       	std	Z+15, r1	; 0x0f
 298:	16 86       	std	Z+14, r1	; 0x0e
	pollMotor(M0);	
 29a:	c0 cf       	rjmp	.-128    	; 0x21c <pollMotor>

0000029c <main>:
void checkHomeSwiches(struct Motor *motor);//check the state of the position indicating switch of the motor.
void pollMotor(struct Motor *motor);//THE LOGIC IS HERE. Checks all the Motors and decide what to do.

void testNow();//Testing purposes

int main(void){
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	60 97       	sbiw	r28, 0x10	; 16
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
	struct Motor MtestM;
	M0 = &MtestM;
 2b0:	ce 01       	movw	r24, r28
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	90 93 01 02 	sts	0x0201, r25
 2b8:	80 93 00 02 	sts	0x0200, r24
	pinSetup();
 2bc:	92 df       	rcall	.-220    	; 0x1e2 <pinSetup>
	initialize();
 2be:	a9 df       	rcall	.-174    	; 0x212 <initialize>
	motorObjectSetup(M0);
 2c0:	80 91 00 02 	lds	r24, 0x0200
 2c4:	90 91 01 02 	lds	r25, 0x0201
 2c8:	7a df       	rcall	.-268    	; 0x1be <motorObjectSetup>
	sei();//enable global interrupt
 2ca:	78 94       	sei
	testNow();
 2cc:	ca df       	rcall	.-108    	; 0x262 <testNow>
=======
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	33 ec       	ldi	r19, 0xC3	; 195
 2aa:	99 e0       	ldi	r25, 0x09	; 9
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	30 40       	sbci	r19, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x3a>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x44>
 2b6:	00 00       	nop
	_delay_ms(200);
	PORTB = (0<<PB7);
 2b8:	15 b8       	out	0x05, r1	; 5
 2ba:	ef ef       	ldi	r30, 0xFF	; 255
 2bc:	f3 ec       	ldi	r31, 0xC3	; 195
 2be:	29 e0       	ldi	r18, 0x09	; 9
 2c0:	e1 50       	subi	r30, 0x01	; 1
 2c2:	f0 40       	sbci	r31, 0x00	; 0
 2c4:	20 40       	sbci	r18, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x4e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x58>
 2ca:	00 00       	nop
	_delay_ms(200);
	PORTB = (1<<PB7);
 2cc:	85 b9       	out	0x05, r24	; 5
 2ce:	3f ef       	ldi	r19, 0xFF	; 255
 2d0:	83 ec       	ldi	r24, 0xC3	; 195
 2d2:	99 e0       	ldi	r25, 0x09	; 9
 2d4:	31 50       	subi	r19, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x62>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x6c>
 2de:	00 00       	nop
	_delay_ms(200);
	PORTB = (0<<PB7);
 2e0:	15 b8       	out	0x05, r1	; 5
 2e2:	ef ef       	ldi	r30, 0xFF	; 255
 2e4:	f3 ec       	ldi	r31, 0xC3	; 195
 2e6:	29 e0       	ldi	r18, 0x09	; 9
 2e8:	e1 50       	subi	r30, 0x01	; 1
 2ea:	f0 40       	sbci	r31, 0x00	; 0
 2ec:	20 40       	sbci	r18, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x76>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x80>
 2f2:	00 00       	nop
>>>>>>> c1d778d9278ba6bb1e03f0d0267254f1260e6b08
	while(1){
		
		M0->directionToRotate=LEFT;
		pollMotor(M0);
		_delay_ms(500);
		M0->directionToRotate=RIGHT;
 2f4:	01 e0       	ldi	r16, 0x01	; 1
 2f6:	10 e0       	ldi	r17, 0x00	; 0
	PORTB = (0<<PB7);
	_delay_ms(200);
	//test end
>>>>>>> eeee515d7a36fddddef69784b8772d53cb6268ae
	while(1){
		pollMotor(M0);
<<<<<<< HEAD
 2ce:	80 91 00 02 	lds	r24, 0x0200
 2d2:	90 91 01 02 	lds	r25, 0x0201
 2d6:	a2 df       	rcall	.-188    	; 0x21c <pollMotor>
 2d8:	fa cf       	rjmp	.-12     	; 0x2ce <main+0x32>
=======
<<<<<<< HEAD
 234:	80 91 00 02 	lds	r24, 0x0200
 238:	90 91 01 02 	lds	r25, 0x0201
 23c:	d6 df       	rcall	.-84     	; 0x1ea <pollMotor>
		PORTB = (1<<PB7);
 23e:	c5 b9       	out	0x05, r28	; 5
 240:	f9 cf       	rjmp	.-14     	; 0x234 <main+0x6>

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
=======
 328:	79 df       	rcall	.-270    	; 0x21c <pollMotor>
 32a:	ff ef       	ldi	r31, 0xFF	; 255
 32c:	29 e6       	ldi	r18, 0x69	; 105
 32e:	38 e1       	ldi	r19, 0x18	; 24
 330:	f1 50       	subi	r31, 0x01	; 1
 332:	20 40       	sbci	r18, 0x00	; 0
 334:	30 40       	sbci	r19, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0xbe>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0xc8>
 33a:	00 00       	nop
 33c:	dd cf       	rjmp	.-70     	; 0x2f8 <main+0x86>
>>>>>>> eeee515d7a36fddddef69784b8772d53cb6268ae

000002da <_exit>:
 2da:	f8 94       	cli

<<<<<<< HEAD
000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
=======
00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
>>>>>>> c1d778d9278ba6bb1e03f0d0267254f1260e6b08
>>>>>>> eeee515d7a36fddddef69784b8772d53cb6268ae
